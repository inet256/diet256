// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: diet256.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	FindAddr(ctx context.Context, in *FindAddrReq, opts ...grpc.CallOption) (*FindAddrRes, error)
	LookupPublicKey(ctx context.Context, in *LookupPublicKeyReq, opts ...grpc.CallOption) (*LookupPublicKeyRes, error)
	Dial(ctx context.Context, in *DialReq, opts ...grpc.CallOption) (*DialRes, error)
	Listen(ctx context.Context, in *ListenReq, opts ...grpc.CallOption) (Control_ListenClient, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) FindAddr(ctx context.Context, in *FindAddrReq, opts ...grpc.CallOption) (*FindAddrRes, error) {
	out := new(FindAddrRes)
	err := c.cc.Invoke(ctx, "/diet256.Control/FindAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) LookupPublicKey(ctx context.Context, in *LookupPublicKeyReq, opts ...grpc.CallOption) (*LookupPublicKeyRes, error) {
	out := new(LookupPublicKeyRes)
	err := c.cc.Invoke(ctx, "/diet256.Control/LookupPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) Dial(ctx context.Context, in *DialReq, opts ...grpc.CallOption) (*DialRes, error) {
	out := new(DialRes)
	err := c.cc.Invoke(ctx, "/diet256.Control/Dial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) Listen(ctx context.Context, in *ListenReq, opts ...grpc.CallOption) (Control_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Control_ServiceDesc.Streams[0], "/diet256.Control/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Control_ListenClient interface {
	Recv() (*ListenRes, error)
	grpc.ClientStream
}

type controlListenClient struct {
	grpc.ClientStream
}

func (x *controlListenClient) Recv() (*ListenRes, error) {
	m := new(ListenRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility
type ControlServer interface {
	FindAddr(context.Context, *FindAddrReq) (*FindAddrRes, error)
	LookupPublicKey(context.Context, *LookupPublicKeyReq) (*LookupPublicKeyRes, error)
	Dial(context.Context, *DialReq) (*DialRes, error)
	Listen(*ListenReq, Control_ListenServer) error
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (UnimplementedControlServer) FindAddr(context.Context, *FindAddrReq) (*FindAddrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAddr not implemented")
}
func (UnimplementedControlServer) LookupPublicKey(context.Context, *LookupPublicKeyReq) (*LookupPublicKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupPublicKey not implemented")
}
func (UnimplementedControlServer) Dial(context.Context, *DialReq) (*DialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dial not implemented")
}
func (UnimplementedControlServer) Listen(*ListenReq, Control_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_FindAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).FindAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diet256.Control/FindAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).FindAddr(ctx, req.(*FindAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_LookupPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupPublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).LookupPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diet256.Control/LookupPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).LookupPublicKey(ctx, req.(*LookupPublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_Dial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).Dial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diet256.Control/Dial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).Dial(ctx, req.(*DialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServer).Listen(m, &controlListenServer{stream})
}

type Control_ListenServer interface {
	Send(*ListenRes) error
	grpc.ServerStream
}

type controlListenServer struct {
	grpc.ServerStream
}

func (x *controlListenServer) Send(m *ListenRes) error {
	return x.ServerStream.SendMsg(m)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diet256.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAddr",
			Handler:    _Control_FindAddr_Handler,
		},
		{
			MethodName: "LookupPublicKey",
			Handler:    _Control_LookupPublicKey_Handler,
		},
		{
			MethodName: "Dial",
			Handler:    _Control_Dial_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Control_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diet256.proto",
}
